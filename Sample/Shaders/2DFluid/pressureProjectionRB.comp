#version 460 core
layout(local_size_x = 32, local_size_y = 32) in;

uniform int velocities_WRITE;
uniform int velocities_READ;

layout(rgba16f, binding = 0) uniform image2DArray velocities;
layout(binding = 1) uniform sampler2D pressure_READ;

// 01 ------ 11
// |          |
// |  (0, 0)  |
// |          |
// 00 ------ 10

vec2 pixelToTexel(vec2 p, vec2 tSize)
{
  return (p + 0.5) / tSize;
}

void main()
{
  const ivec2 tSize = textureSize(pressure_READ, 0);

  const vec2 pixelCoords = gl_GlobalInvocationID.xy;
  const vec2 dx = vec2(1, 0); 
  const vec2 dy = vec2(0, 1);

  const vec4 pC = texelFetch(pressure_READ, ivec2(pixelCoords), 0);
  const vec4 pL = texture(pressure_READ, pixelToTexel(pixelCoords - dx, tSize));
  const vec4 pR = texture(pressure_READ, pixelToTexel(pixelCoords + dx, tSize));
  const vec4 pB = texture(pressure_READ, pixelToTexel(pixelCoords - dy, tSize));
  const vec4 pT = texture(pressure_READ, pixelToTexel(pixelCoords + dy, tSize));

  const vec2 rGrad = 0.5 * vec2(pC.y - pL.y, pC.w - pB.w);
  const vec2 gGrad = 0.5 * vec2(pR.x - pC.x, pC.z - pB.z);
  const vec2 bGrad = 0.5 * vec2(pR.w - pC.w, pT.y - pC.y);
  const vec2 aGrad = 0.5 * vec2(pC.z - pL.z, pT.x - pC.x);

  const ivec2 pCoords = 2 * ivec2(pixelCoords);
  const vec2 rVel = imageLoad(velocities, ivec3(pCoords, velocities_READ)).xy;
  const vec2 gVel = imageLoad(velocities, ivec3(pCoords + ivec2(1, 0), velocities_READ)).xy;
  const vec2 bVel = imageLoad(velocities, ivec3(pCoords + ivec2(1, 1), velocities_READ)).xy;
  const vec2 aVel = imageLoad(velocities, ivec3(pCoords + ivec2(0, 1), velocities_READ)).xy;

  imageStore(velocities, ivec3(pCoords              , velocities_WRITE), vec4(rVel - rGrad, 0.0, 0.0));
  imageStore(velocities, ivec3(pCoords + ivec2(1, 0), velocities_WRITE), vec4(gVel - gGrad, 0.0, 0.0));
  imageStore(velocities, ivec3(pCoords + ivec2(1, 1), velocities_WRITE), vec4(bVel - bGrad, 0.0, 0.0));
  imageStore(velocities, ivec3(pCoords + ivec2(0, 1), velocities_WRITE), vec4(aVel - aGrad, 0.0, 0.0));
}
