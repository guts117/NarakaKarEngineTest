#version 460 core
layout(local_size_x = 32, local_size_y = 32) in;

layout(rgba16f, binding = 0) uniform image3D divergence;
layout(rgba16f, binding = 1) uniform image3D velocity;

ivec3 clamp_coord(ivec3 coord, ivec3 size)
{
    return clamp(coord, ivec3(0, 0, 0), size);
}

void main()
{
	ivec3 pixelCoords = ivec3(gl_GlobalInvocationID);
	ivec3 tSize = imageSize(velocity);
	
	vec4 left 	= imageLoad(velocity, clamp_coord(pixelCoords + ivec3(-1,  0,  0), tSize));
	vec4 right 	= imageLoad(velocity, clamp_coord(pixelCoords + ivec3( 1,  0,  0), tSize));
	vec4 top 	= imageLoad(velocity, clamp_coord(pixelCoords + ivec3( 0,  1,  0), tSize));
	vec4 bottom = imageLoad(velocity, clamp_coord(pixelCoords + ivec3( 0, -1,  0), tSize));
	vec4 front 	= imageLoad(velocity, clamp_coord(pixelCoords + ivec3( 0,  0, -1), tSize));
	vec4 back 	= imageLoad(velocity, clamp_coord(pixelCoords + ivec3( 0,  0,  1), tSize));

	float div = 0.5 * ((right.x - left.x) + (top.y - bottom.y) + (back.z - front.z));

	imageStore(divergence, pixelCoords, vec4(div, 0, 0, 0));
}
