#version 460 core
layout(local_size_x = 32, local_size_y = 32) in;

layout(rgba16f, binding = 0) uniform image3D pressure;
layout(rgba16f, binding = 1) uniform image3D divergence;

ivec3 clamp_coord(ivec3 coord, ivec3 size)
{
    return clamp(coord, ivec3(0, 0, 0), size);
}

void main()
{
    ivec3 pixelCoords = ivec3(gl_GlobalInvocationID);
	ivec3 tSize = imageSize(pressure);

	vec4 left 	= imageLoad(pressure, clamp_coord(pixelCoords + ivec3(-1,  0,  0), tSize));
	vec4 right 	= imageLoad(pressure, clamp_coord(pixelCoords + ivec3( 1,  0,  0), tSize));
	vec4 top 	= imageLoad(pressure, clamp_coord(pixelCoords + ivec3( 0,  1,  0), tSize));
	vec4 bottom = imageLoad(pressure, clamp_coord(pixelCoords + ivec3( 0, -1,  0), tSize));
	vec4 front 	= imageLoad(pressure, clamp_coord(pixelCoords + ivec3( 0,  0, -1), tSize));
	vec4 back 	= imageLoad(pressure, clamp_coord(pixelCoords + ivec3( 0,  0,  1), tSize));

	// Get the divergence at the current cell.
    vec4 center = imageLoad(divergence, pixelCoords);

	// Compute the new pressure value for the center cell.
    vec4 result = (left + right + top + bottom + front + back - center) / 6.0;
	
	barrier();
    imageStore(pressure, pixelCoords, result);
}